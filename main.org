#+title: Work setup demo
#+EXPORT_FILE_NAME: README.md

* Specs
file:img/0_1.png

* Pre-Reqs
- Linux (Fedora36)
- BSPWM - wm
- Sxhkd - hotkeys
- Polybar - status bar
- Clojure/bb - general purpose/scripting lang
- Bash/Fish - shell
- Konsole - terminal
- Wal & Feh - color palette from background & background setter

* Backgrounds and colors
file:img/1.png
file:img/2.png
file:img/3.png

** ~~/.config/bspwm/bspwmrc~
#+begin_src bash
wallpaper=`find ~/wallpapers/ | sort -R | head -1`
wal -i $wallpaper -n
feh --bg-fill $wallpaper --bg-fill $wallpaper
#+end_src

* Work layout
** Binary layout
file:img/4.png
** Real example
file:img/5.png

* Single monitor with 5 desktops
** ~~/.config/bspwm/bspwmrc~
#+begin_src bash
bspc monitor HDMI-A-0 -d 1 2 3 4 5
xrandr -s 1920x1080 -r 144

bspc config border_width         5
bspc config window_gap          15

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true
#+end_src

* Some rules for apps
** ~~/.config/bspwm/bspwmrc~
#+begin_src bash
bspc rule -a Google-chrome desktop=3
bspc rule -a TelegramDesktop:telegram-desktop desktop=2
bspc rule -a Peek state=floating follow=on focus=on
#+end_src

* Some hotkeys in sxhkd
** ~~/.config/sxhkd/sxhkdrc~
#+begin_src bash
super + Return
	konsole

Print
	sudo kill -9 `pgrep flameshot` && \
	flameshot gui && \
	xclip -i `ls -d -r --no-icons $HOME/Pictures/* | head -1` \
	-selection clipboard \
	-target image/png

super + space
	rofi -show drun

alt + space
	rofi -show run
#+end_src

* Bspc hotkeys
** ~~/.config/sxhkd/sxhkdrc~
#+begin_src bash

# Move window
super + {Left,Down,Up,Right}
	bspc node -s {west,south,north,east}

# Cycle between windows
alt + {_,shift + }Tab
	bspc node -f {next,prev}.LOCAL

# Reload bspwm config
super + shift + r
	bspc wm -r && pkill -USR1 -x sxhkd

# Close window
super + w
	bspc node -c

# Move window to desktop
super + {_,alt +} {1-9}
	bspc {desktop -f,node -d} {1-9}
#+end_src
* Polybar examples
** Top bar modules
#+begin_src conf
modules-center = music-now
modules-left = xworkspaces xwindow
modules-right = vpn totp filesystem pulseaudio xkeyboard memory cpu; wlan eth date
#+end_src
** Module example
#+begin_src conf
[module/cpu]
type = internal/cpu
interval = 2
format-prefix = "CPU "
format-prefix-foreground = ${colors.primary}
label = %percentage:2%%
#+end_src
** Custom module
*** Module
Echo to polybar
#+begin_src conf
[module/music-now]
type = custom/script
exec = "bb ~/scripts/src/media.clj"
exec-if = "playerctl status | grep Playing"
interval = 3
#+end_src
*** Script
#+begin_src clojure
(ns media
  (:require [clojure.java.shell :as sh]
            [clojure.string :as string]))

(def ->int #(Long/parseLong %))
(def ->float #(Float/parseFloat %))

(defn ->out [& args]
  (-> (apply sh/sh args)
      (:out)
      (string/split #"\n")))

(defn crop [re-field re-crop & [parse?]]
  (->> (->out "playerctl" "metadata")
       (filter #(re-find re-field %))
       (mapv (comp (or parse? identity)
                  #(string/trim %)
                  #(string/replace % re-crop "")))))

(let [position (-> (->out "playerctl" "position")
                   (first)
                   (->float)
                   (int))
      length   (-> (crop #"length"
                         #"chromium mpris:\w+"
                         ->int)
                   (first)
                   (/ 1000000)
                   (int)
                   (#(/ % 100)))
      name     (crop #"artist|title|album"
                     #"chromium xesam:\w+")
      percent  (-> position
                   (/ length)
                   (int )
                   (str "%"))]

  (->> (conj name percent)
       (filter not-empty)
       (string/join " ~ ")
       (symbol)))
#+end_src
*** Result
~HORUS ~ Марс наш ~ 91%~
